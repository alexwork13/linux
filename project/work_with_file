-------------------------Групповые символы, использующиеся при работе с текстовыми данными:---------------------------

* – любое количество любых символов;
**? ** _ – любой символ;_
**! ** – не (любой символ кроме указанных);
**[ac] ** – a или c ;
[a - c] _ –_ a , b , c_._


-----------------------------------------Права доступа и владельцы файлов---------------------------------------------

В классической линуксовой файловой системе можно задавать права доступа на основе трех принадлежностей: 
владелец объекта, группа владельцев, все остальные.

Посмотреть текущие права доступа, равно как и владельце можно при помощи команды stat:
      stat file_name
      
Изменить владельца объекта можно при помощи команды chown
      chown user_owner:group_name file_name.txt (сделатьuser_owner владельцем файла и группи group_name file.txt );
                                                (если только групу изменить -  :group_name file_name)

Изменить группу владельцев объекта можно при помощи команды chgrp 
      chgrp group_name file.txt (сделать группу group_name группой владельцев файла file.txt);
      
Для установки разрешений на доступ к объекту файловой системы Linux использует комбинации трех стандартных прав:
чтение, запись и выполнение.

suid - бит запуска от имени владельца;            -  дериктории
sgid - бит запуска от имени группы владельцев;    -  файлы и дериктории
**sticky ** - бит защиты содержимого.

Права можно устанавливать, как указывая буквенные комбинации (r- read, w – write и x - execute)  rwx
                                                                  4     +      2     +    1     = 7
                                                                  
                                     SUID (s или 4)        SGID (s или 2)               sticky-bit (t или 1)    
user  - u |           r 4              u+s
group - g | > a   +-  w 2                                       g+2
other - o |           x 1                                                                    o+t   

При работе с объектами файловой системы можно указывать маски создания файлов и папок, 
разрешения доступа по умолчанию для вновь создаваемых объектов.
Посмотреть установленую маску
      umask 
      umask 0022   -   установить маску 0755 (0777-0022)


----------------------------------------поиск информации команда - FIND ---------------------------------------------
                            
                            
find    [папка]            [параметры]        критерий                          шаблон [действие]
           |                    |              |                                   |
каталог в котором искать    доп параметры    имя, дата создания, права   значение по которому будем отбирать файлы

Параметры:
-P никогда не открывать символические ссылки
-L - получает информацию о файлах по символическим ссылкам. Важно для дальнейшей обработки, чтобы обрабатывалась не ссылка, а сам файл.
-maxdepth - максимальная глубина поиска по подкаталогам, для поиска только в текущем каталоге установите 1.
-depth - искать сначала в текущем каталоге, а потом в подкаталогах
-mount искать файлы только в этой файловой системе.
-version - показать версию утилиты find
-print - выводить полные имена файлов
-type f - искать только файлы
-type d - поиск папки в Linux

Критерии:
-name - поиск файлов по имени (-iname не учитывать регистр)
-perm - поиск файлов в Linux по режиму доступа
-user - поиск файлов по владельцу
-group - поиск по группе
-mtime - поиск по времени модификации файла
-atime - поиск файлов по дате последнего чтения
-nogroup - поиск файлов, не принадлежащих ни одной группе
-nouser - поиск файлов без владельцев
-newer - найти файлы новее чем указанный
-size - поиск файлов в Linux по их размеру

Пример:
   find . -name "*.jpg"   -   Искать файлы по имени в текущей папке
   find . -maxdepth 1 -name "*.php"   -   Поиска файлов по имени в Linux только в этой папке
   find . -not -name "test*"   -  Найти файлы, которые не соответствуют шаблону
   find . -name "test" -not -name "*.php"   -   все файлы, начинающиеся на test, но без расширения php
   find ./test ./test2 -type f -name "*.c"   -   Искать в двух каталогах одновременно только файлы с окончанием
   find ~ -type f -name ".*"   -   Найти скрытые файлы в домашней дериктории 
   find . type f -perm 0664   -   Найти файлы с определенной маской прав, например, 0664
   find / -perm 2644 или find / -perm /u=s  -   Найти файлы с установленным флагом suid/guid
   find /tmp -type f -empty   -   поиск пустих файлов (папок - d)
   
Для выполнения произвольных команд для найденных файлов используется опция -exec. 

 find . -exec ls -ld {} \;   -   ls для получения подробной информации о каждом файле
 find /tmp -type f -name "*.txt" -exec rm -f {} \;   -   Удалить все текстовые файлы в tmp
 find /home/bob/dir -type f -name *.log -size +10M -exec rm -f {} \;   -   Удалить все файлы больше 100 мегабайт

   ---------------------------------------------------------------------------------------------------------------






