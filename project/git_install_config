  Настройка Git
------------------------------------------
      Алиасы команд 
      ФАЙЛ: .gitconfig
      
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p
-------------------------------------------
      для интерактивного отображения в консоли
git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1
      А затем добавить в конец файла .bashrc такие строки:
GIT_PROMPT_ONLY_IN_REPO=1
source ~/.bash-git-prompt/gitprompt.sh
      Для того, чтобы изменения применились, перезапустить bash:
exec bash
-------------------------------------------
      Глобальная настройка
git config --global user.name "Ваше имя"
git config --global user.email "Ваш Email"
-------------------------------------------
      Инициализируем папку для Git репозитория. Это нужно сделать только один раз для каждого проекта.
git init
      Связываем папку с удаленным репозиторием
git remote add origin https://github.com/LeoXCoder/test_project.git
-------------------------------------------
      Добавляем все новые и измененные файлы
git add .
    Помечаем все новые и измененные файлы сообщением (commit)
git commit -m "message" (-m "message" обезательно вписывает)
-------------------------------------------
      Закачиваем код на удаленный репозиторий
git push -u origin master
      в таком виде используем только первый раз, потом используем команду без флагов
git push
      Можно посмотреть статус изменений, которые были сделаны.
git status
-------------------------------------------
      Для скачивания репозитория используется команда
git pull + адрес репозитория
-------------------------------------------
      Для использования репозитория на другом компьютере, используем следующие команды.
      Клонирование репозитория
git clone https://github.com/LeoXCoder/test_project.git
      В результате git скачает удаленный репозиторий в новую папку test-project
      После каких-то изменений в коде, выполняем все те же команды
git add .
git commit -m "I changed the user module."
git push
-------------------------------------------
      Откат изменений
      Полный откат до предыдущего коммита
git reset HEAD --hard

      Сброс изменений в файле на версию коммита
git checkout <filename>

      Преключение до установленного тега, например v1
git checkout v1
------------------------------------------
      Получение списка произведенных изменений — функция команды 
git log
      однострочный формат    
git log --pretty=oneline

----------------------------------------
      переключение между версиями в ветке
git checkout <hash>   
      переключение на последнюю версию в ветке master
git checkout master 

      Теперь текущая версия страницы называется v1. ТЕГ первой версии (текущей)
git tag v1
      перейти на предыдущую версию, используя ТЕГ
git checkout v1^  

      Переключение по имени тега
git checkout v1
git checkout v1-beta
      просмотр всех тегов
git tag
      просмотр всех тегов в логах
git hist master 
      отмена в рабочем каталоге
git checkout hello.html(изменяемый файл)  

      Команда reset сбрасывает буферную зону к HEAD. Это очищает буферную зону от изменений, которые мы только что проиндексировали.
      Команда reset (по умолчанию) не изменяет рабочий каталог. Поэтому рабочий каталог все еще содержит нежелательный комментарий.
      Мы можем использовать команду checkout, чтобы удалить нежелательные изменения в рабочем каталоге.
git reset HEAD hello.html
      
      сброс коммитов к предшествующим коммиту (к комиту с указанным тегом)
git reset --hard v1
      показать все коммиты.
git hist --all
      удалить тег коммита
git tag -d oops
-----------------------------------------------------
      внести изменения в последний коммит
git commit --amend -m "Add an author/email comment"  
-----------------------------------------------------
      перемещение файлов в репозитории 
mkdir lib
git mv hello.html lib 
      или в ос
(mkdir lib
mv hello.html lib
git add lib/hello.html
git rm hello.html)
 
 
 
 
 
 








