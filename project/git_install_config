                                                     Настройка Git
------------------------------------------
                                                    Алиасы команд 
      ФАЙЛ: .gitconfig
      
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  logb = log --oneline --decorate --graph --all
  type = cat-file -t
  dump = cat-file -p
  
-----------------------------------------  для интерактивного отображения в консоли  --------------------------------------
                                     
      git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1
А затем добавить в конец файла .bashrc такие строки:
      GIT_PROMPT_ONLY_IN_REPO=1
      
      source ~/.bash-git-prompt/gitprompt.sh
Для того, чтобы изменения применились, перезапустить bash:
      exec bash
------------------------------------------   Глобальная настройка   ----------------------------------------------------
      git config --global user.name "Ваше имя"
      git config --global user.email "Ваш Email"

---------------------------------- Посмотреть информацию об удаленных репозиториях  ------------------------------------
      git remote -v
Склонировать удаленный репозиторий на локальную машину:
      git clone https://github.com/express42/zabbixapi.git
 
 ---------------------------------- Инициализируем папку для Git репозитория. ------------------------------------------

Это нужно сделать только один раз для каждого проекта.
      git init
Связываем папку с удаленным репозиторием
      git remote add origin https://github.com/LeoXCoder/test_project.git
      
----------------------------------- Добавляем все новые и измененные файлы  --------------------------------------------

      git add .
Помечаем все новые и измененные файлы сообщением (commit)
      git commit -m "message" (-m "message" обезательно вписывает)

Структура:

Получить хеш обьекта (файла)
      git hash-object object_name
Получить тип обьекта
      git cat-file -t af5626b (начало полученого хеша выше)
Получить содержание blob
      git cat-file blob af5626b
Просмотреть какие блобы и их хэши содержит дерево      
      git ls-tree HEAD
Просмотреть информацию про текущий комит и дерево
      git cat-file commit HEAD
      

--------------------------------- Закачиваем код на удаленный репозиторий   --------------------------------------------

      git push -u origin master   - в ветку master на удаленном репозитории
в таком виде используем только первый раз, потом используем команду без флагов
      git push
Можно посмотреть статус изменений, которые были сделаны.
      git status
      git diff --cached смотрим  проиндексированные изменения
      git show   -  посмотреть информацию о последнем комите
      
------------------------------------- Забирает данные с удаленного репо ---------------------------------------------------
Но не применяет их
    git fetch -a
    git fetch <remotename>
    
-----------------------------  Для скачивания репозитория используется команда  ------------------------------------------
git pull + адрес репозитория  применятся все изминения которые были на удаленном репо


------------------------------------------- Откат изменений -------------------------------------------------------------
                                                    
      
     git revert # делает новый (обратный) комит.                         git reset HEAD~1 # удаляет комиты после
Не меняет истории - безопасный способ откатить                           указанного. Меняет историю - небезопасный способ
изменения. Стоит использовать для публичных                              откатить изменения. Можно использовать для
комитов.                                                                 локальных комитов.
       
      
Полный откат до предыдущего коммита
      git reset  --hard HEAD~1(число коммитов назад)
      git reset --hard v1(тег)

Стереть все коммиты до текущего 
      git reset --soft HEAD~3(число коммитов перед текущим)

показать все коммиты.
      git hist --all
удалить тег коммита
      git tag -d oops
      
      
      
------------------------------------- Получение списка произведенных изменений — функция команды --------------------------
      git log
однострочный формат    
      git log --pretty=oneline

--------------------------------------------------------------------------------------------------------------------------
                                                      Ветки 
                                                
                                                     Типы веток
• Remote (удаленные) - ветки в удаленном
репозитории
• Remote-tracking (отслеживающие удаленные) -
локальные указатели на удаленные ветки.
• Non-tracking local (неотслеживающие)- локальные
ветки, не привязанные ни к какой удаленной ветке
• Tracking local (отслеживающие) - локальные ветки,
напрямую связанные с удаленными ветками.
Работают команды git pull, git push, git fetch
     
    git branch # Посмотрите список локальных веток (звездочкой помечена текущая ветка)
    git branch <branch_name> # создать ветку
    git checkout <branch_name> # перейти в ветку
    git checkout -b <branch_name> # создать и перейти  
    git branch -d <branch_name>  # удаление ветки 
    git log --oneline --decorate  # посмотреть на которой из веток сейчас HEAD (указатель)
    
                                                     Слитие веток
                                
                            Merge                                                   rebase
    git checkout master # переходим на ветку master             git checkout feature # переходим на ветку feature
    git merge feature # вливаем в master ветку feature          git rebase master # меняем основание ветки feature

                                        
переключение между версиями в ветке
      git checkout <hash>   
переключение на последнюю версию в ветке master
      git checkout master 

---------------------------------------------------------- Теги -----------------------------------------------------

Теперь текущая версия страницы называется v1. ТЕГ первой версии (текущей)
      git tag v1
перейти на предыдущую версию, используя ТЕГ
      git checkout v1^  

                                      Переключение по имени тега
      git checkout v1
      git checkout v1-beta
просмотр всех тегов
      git tag
просмотр всех тегов в логах
      git hist master 
По умолчанию при пуше теги не отправляются, что бы отправить конкретный тег 
      git push origin v1.5
что бы отправить за раз все теги
      git push origin --tags

      
----------------------------------------------- внести изменения в последний коммит --------------------------------------

git commit --amend -m "Add an author/email comment"  

---------------------------------------------- перемещение файлов в репозитории ------------------------------------------
      mkdir lib
      git mv hello.html lib 
или в ос
      (mkdir lib
       mv hello.html lib
       git add lib/hello.html
       git rm hello.html)
 
 Посмотреть какие комиты изменяли каждую строку файла в последний раз.
 
       git blame file.txt
 
 ------------------------------------------------- SSH авторизация ---------------------------------------------------------
 Генерация кключей 
        ssh-keygen
        cat id_key.pub   Скопировать ключ
 В GitHub в настройках SHH добавить ключ, если до этого использовалась свяязь по http
        git remote -v (проверка ветки удаленного репозитория)
        git remote  set-url origin  github_url...  - изменить доступ по shh сылке
        
 
 








